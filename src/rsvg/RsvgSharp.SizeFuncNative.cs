// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RsvgSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code

	internal delegate void SizeFuncNative(out int width, out int height, IntPtr user_data);

	internal class SizeFuncInvoker {

		SizeFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~SizeFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal SizeFuncInvoker (SizeFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal SizeFuncInvoker (SizeFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal SizeFuncInvoker (SizeFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Rsvg.SizeFunc Handler {
			get {
				return new Rsvg.SizeFunc(InvokeNative);
			}
		}

		void InvokeNative (out int width, out int height)
		{
			native_cb (out width, out height, __data);
		}
	}

	internal class SizeFuncWrapper {

		public void NativeCallback (out int width, out int height, IntPtr user_data)
		{
			try {
				managed (out width, out height);
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal SizeFuncNative NativeDelegate;
		Rsvg.SizeFunc managed;

		public SizeFuncWrapper (Rsvg.SizeFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new SizeFuncNative (NativeCallback);
		}

		public static Rsvg.SizeFunc GetManagedDelegate (SizeFuncNative native)
		{
			if (native == null)
				return null;
			SizeFuncWrapper wrapper = (SizeFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
